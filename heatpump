#!/bin/bash

#Get setting etc

path=`dirname "$0":`
username=`cat $path/settings | grep username | cut -f2`
password=`cat $path/settings | grep password | cut -f2`
mqtt=`cat $path/settings | grep mqttserver | cut -f2`
mqttuser=`cat $path/settings | grep mqttuser | cut -f2`
mqttpass=`cat $path/settings | grep mqttpass | cut -f2`
mqttport=`cat $path/settings | grep mqttport | cut -f2`
devicecode=`cat $path/settings | grep devicecode | cut -f2`
cloudurl="https://cloud.linked-go.com/cloudservice/api"
name=`cat $path/settings | grep openhabname | cut -f2`

mkdir -p $path/tmp

update()
{
token=`curl -s -H "Content-Type: application/json; charset=utf-8" -X POST \
	-d '{"user_name":"'$username'",
		"password":"'$password'",
		"type":"2"}' $cloudurl/app/user/login.json | 
		jq -r '.object_result."x-token"'`
echo $token > $path/tmp/token
}
#update
check=`find $path/tmp/token -newermt '-86400 seconds' | wc -l`
if [[ $check -lt "1" ]]; then
        update
fi

token=`cat $path/tmp/token`


power()
{
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param":[{"device_code":"'$devicecode'","protocol_code":"Power","value":"'$1'"}]}' \
	-X POST $cloudurl/app/device/control.json
}

if [[ $1 = "status" ]]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$devicecode'"}' \
	-X POST $cloudurl/app/device/getDeviceStatus.json > $path/tmp/status

	online=`cat $path/tmp/status | jq -r '.object_result."status"'`
	is_fault=`cat $path/tmp/status | jq -r '.object_result."is_fault"'`
	if [[ $is_fault = "true" ]];then
		curl -s -H "Content-Type: application/json; charset=utf-8" \
		-H "x-token: $token" \
		-d '{"device_code":"'$devicecode'"}' \
		-X POST $cloudurl/app/device/getFaultDataByDeviceCode.json > $path/tmp/fault
		error_msg=`cat $path/tmp/fault | jq -r '.object_result[]."description"'`
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "${error_msg}" \
			-t "evoheat/$name/error_msg/state"

	elif [[ $is_fault = "false" ]];then
		error_msg="No Error"
		mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
			-m "${error_msg}" \
			-t "evoheat/$name/error_msg/state"
	fi
	
	status()
	{
	mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
		-m "${1}" \
		-t "evoheat/$name/$2/state"
	}

	status $online status
	status $is_fault is_fault

elif [[ $1 = "test" ]]; then
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$devicecode'","protocal_codes":["'$2'"]}' \
	-X POST $cloudurl/app/device/getDataByCode.json > $path/tmp/test

elif [[ $1 = "info" ]]; then
	echo info
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"device_code":"'$devicecode'","protocal_codes":["Power","mode","T02","T10","R01","M06","M17","H07","H98","1129","1133","2050","mode_real"]}' \
	-X POST $cloudurl/app/device/getDataByCode.json > $path/tmp/info

	power=`cat $path/tmp/info | jq '.object_result[] | select(.code=="Power")' | jq -r '.value'`
	mode=`cat $path/tmp/info | jq '.object_result[] | select(.code=="mode")' | jq -r '.value'`
	toptemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T10")' | jq -r '.value'`
	bottomtemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="T02")' | jq -r '.value'`
	modereal=`cat $path/tmp/info | jq '.object_result[] | select(.code=="mode_real")' | jq -r '.value'`
	targettemp=`cat $path/tmp/info | jq '.object_result[] | select(.code=="R01")' | jq -r '.value'`



mosquitto_status()
{
	        mosquitto_pub -r -h $mqtt -p $mqttport -u $mqttuser -P $mqttpass \
                -m "${1}" \
                -t "evoheat/$name/$2/state"
}

	mosquitto_status $mode mode
	mosquitto_status $toptemp toptemp
	mosquitto_status $bottomtemp bottomtemp
	mosquitto_status $modereal modereal
	mosquitto_status $targettemp targettemp

	if [[ $power = "0" ]];then
		mosquitto_status OFF power

	elif [[ $power = "1" ]];then
		mosquitto_status ON power
		if [[ $mode = "1" ]];then
			mosquitto_status intelligent mode_state
		elif [[ $mode = "2" ]];then
			mosquitto_status eco mode_state
		elif [[ $mode = "3" ]];then
			mosquitto_status hybrid mode_state
		elif [[ $mode = "4" ]];then
			mosquitto_status fast mode_state
		fi
	fi

#control

elif [[ $1 = "on" ]]; then
	power 1

elif [[ $1 = "off" ]]; then
	power 0

elif [[ $1 = "temp" ]]; then
	temp=$2
	curl -s -H "Content-Type: application/json; charset=utf-8" \
	-H "x-token: $token" \
	-d '{"param": [{"device_code": "'$devicecode'","protocol_code": "R01","value": "'$temp'"}]}' \
	-X POST $cloudurl/app/device/control.json

elif [[ $1 = "mode" ]]; then

	mode()
	{
		curl -s -H "Content-Type: application/json; charset=utf-8" \
                -H "x-token: $token" \
                -d '{"param":[{"device_code":"'$devicecode'","protocol_code":"mode","value":"'$mode'"}]}' \
                -X POST $cloudurl/app/device/control.json
	}

	if [[ $2 = "intelligent" ]];then
		mode="1"
		mode

	elif [[ $2 = "eco" ]];then
		mode="2"
		mode

	elif [[ $2 = "hybrid" ]];then
		mode="3"
		mode
	elif [[ $2 = "fast" ]];then
		mode="4"
		mode	
	fi
fi

